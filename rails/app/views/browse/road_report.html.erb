<script type="text/javascript">
  function refreshReport() {
    var new_location = window.location.toString();
    if (new_location.indexOf("use_cache") == -1) {
      new_location = window.location.toString() + "?use_cache=false";
    }
    window.location.assign(new_location);
  }

  var map, vectors, formats, wkt;
  var comp_layers = [];
  var comp_forward_path_layers = [];
  var comp_backward_path_layers = [];

  function init(){
      map = new OpenLayers.Map('map', {
          'projection': new OpenLayers.Projection("EPSG:900913"),
          'displayProjection': new OpenLayers.Projection('EPSG:4326')});

      wms = new OpenLayers.Layer.OSM();

      map.addLayers([wms]);

      wkt = new OpenLayers.Format.WKT({
          'internalProjection': map.baseLayer.projection,
          'externalProjection': new OpenLayers.Projection('EPSG:4326')
      });

      map.addControl(new OpenLayers.Control.ScaleLine());
      map.addControl(new OpenLayers.Control.MousePosition());
      map.addControl(new OpenLayers.Control.Permalink(null, 'http://www.openstreetmap.org/', {}));

      layer_switcher = new OpenLayers.Control.LayerSwitcher()
      map.addControl(layer_switcher);
      //layer_switcher.maximizeControl();

      all_ways_layer = new OpenLayers.Layer.Vector("Road (all ways + end nodes)",
        {visibility: true, styleMap: new OpenLayers.StyleMap({'strokeWidth': 4, 'strokeColor': "black", strokeOpacity: 1})});
      showWaysFromString(all_ways_layer, 'GEOMETRYCOLLECTION(<%= @all_ways_wkt %>)', 'green', true);
      map.addLayer(all_ways_layer);

      <% @road.comps.each_with_index do |comp, comp_index| %>
        comp_layers[<%= comp_index %>] = new OpenLayers.Layer.Vector(
          'Component <%= comp_index + 1 %>',
          {
            visibility: false,
            styleMap: new OpenLayers.StyleMap({'strokeWidth': 2, 'strokeColor': "blue", strokeOpacity: 1})
          }
        );

        <% comp.exit_nodes.each do |node| %>
        showPoint(all_ways_layer, '<%= node.point_wkt %>', 'red');
        <% end %>

        showCircle(all_ways_layer, '<%= comp.beginning_nodes[0].point_wkt %>', 'green');
        showCircle(all_ways_layer, '<%= comp.end_nodes[0].point_wkt %>', 'red');

        <% comp.wkt_points.each_slice(2) do |point_from, point_to| %>
          comp_layers[<%= comp_index %>].addFeatures(new OpenLayers.Feature.Vector(new OpenLayers.Geometry.LineString(new Array(
            OpenLayers.Geometry.fromWKT('<%= point_from %>'),
            OpenLayers.Geometry.fromWKT('<%= point_to %>'))).transform(
              new OpenLayers.Projection("EPSG:4326"),
              map.baseLayer.projection
            )));
        <% end %>

        map.addLayer(comp_layers[<%= comp_index %>]);

        <%
          roundtrip = comp.roundtrip
        %>

        <% if roundtrip.forward_path %>
        <% color = roundtrip.forward_path.complete ? 'green' : 'red' %>
        comp_forward_path_layers[<%= comp_index %>] = new OpenLayers.Layer.Vector(
          '<span style="color: <%= color %>">&nbsp;&nbsp;&nbsp;Roundtrip (forward) (<%= "%.2f" % (roundtrip.forward_path.length / 1000.0) %> km)</span>',
          {visibility: false, styleMap: new OpenLayers.StyleMap({'strokeWidth': 2, 'strokeColor': "${waycolor}"})});

        <% roundtrip.forward_path.wkt_points.each_slice(2) do |point_from, point_to| %>
        comp_forward_path_layers[<%= comp_index %>].addFeatures(new OpenLayers.Feature.Vector(new OpenLayers.Geometry.LineString(new Array(
          OpenLayers.Geometry.fromWKT('<%= point_from %>'),
          OpenLayers.Geometry.fromWKT('<%= point_to %>'))).transform(
            new OpenLayers.Projection("EPSG:4326"),
            map.baseLayer.projection
          ), {waycolor: '<%= color %>'}));
        <% end %>

        showNode(comp_forward_path_layers[<%= comp_index %>], '<%= roundtrip.forward_path.from.point_wkt %>', '<%= asset_path "flag_green.png" %>');
        showNode(comp_forward_path_layers[<%= comp_index %>], '<%= roundtrip.forward_path.to.point_wkt %>', '<%= asset_path "flag_finish.png" %>');

        map.addLayer(comp_forward_path_layers[<%= comp_index %>]);
        <% end %>

        <% if roundtrip.backward_path %>
        <% color = roundtrip.backward_path.complete ? 'green' : 'red' %>
        comp_backward_path_layers[<%= comp_index %>] = new OpenLayers.Layer.Vector(
          '<span style="color: <%= color %>">&nbsp;&nbsp;&nbsp;Roundtrip (backward) (<%= "%.2f" % (roundtrip.backward_path.length / 1000.0) %> km)</span>',
          {visibility: false, styleMap: new OpenLayers.StyleMap({'strokeWidth': 2, 'strokeColor': "${waycolor}"})});

        <% roundtrip.backward_path.wkt_points.each_slice(2) do |point_from, point_to| %>
        comp_backward_path_layers[<%= comp_index %>].addFeatures(new OpenLayers.Feature.Vector(new OpenLayers.Geometry.LineString(new Array(
          OpenLayers.Geometry.fromWKT('<%= point_from %>'),
          OpenLayers.Geometry.fromWKT('<%= point_to %>'))).transform(
            new OpenLayers.Projection("EPSG:4326"),
            map.baseLayer.projection
          ), {waycolor: '<%= color %>'}));
        <% end %>

        showNode(comp_backward_path_layers[<%= comp_index %>], '<%= roundtrip.backward_path.from.point_wkt %>', '<%= asset_path "flag_green.png" %>');
        showNode(comp_backward_path_layers[<%= comp_index %>], '<%= roundtrip.backward_path.to.point_wkt %>', '<%= asset_path "flag_finish.png" %>');

        map.addLayer(comp_backward_path_layers[<%= comp_index %>]);
        <% end %>
      <% end %>

      <% @mark_points_all.each do |p| %>
        //showNode(all_ways_layer, '<%= p %>', '<%= asset_path "flag_blue.png" %>');
      <% end %>
  }

  function showNode(vector_layer, point_wkt, image_url) {
    vector_layer.addFeatures(new OpenLayers.Feature.Vector(
            OpenLayers.Geometry.fromWKT(point_wkt).transform(new OpenLayers.Projection("EPSG:4326"), map.baseLayer.projection),
            {}, {externalGraphic: image_url, graphicHeight: 24, graphicWidth: 24}));
  }

  function showPoint(vector_layer, point_wkt, color) {
    vector_layer.addFeatures(new OpenLayers.Feature.Vector(
            //OpenLayers.Geometry.Polygon.createRegularPolygon(
            OpenLayers.Geometry.fromWKT(point_wkt).transform(new OpenLayers.Projection("EPSG:4326"), map.baseLayer.projection),
            //100, 20, 0),
            {}, {pointRadius: 6, strokeOpacity: 1, fillOpacity: 1, fillColor: color}));
  }

  function showCircle(vector_layer, point_wkt, color) {
      vector_layer.addFeatures(new OpenLayers.Feature.Vector(
//            OpenLayers.Geometry.Polygon.createRegularPolygon(
            OpenLayers.Geometry.fromWKT(point_wkt).transform(new OpenLayers.Projection("EPSG:4326"), map.baseLayer.projection),
//            100, 20, 0),
            {}, {pointRadius: 22, strokeOpacity: 0.5, fillOpacity: 0.5, fillColor: color}));
  }

  function showWays(layer, features, waycolor, zoom) {
    var bounds;
      if(features) {
          if(features.constructor != Array) {
              features = [features];
          }
          okfeatures = new Array();
          for(var i=0; i<features.length; ++i) {
              if (features[i] == undefined || features[i].attributes == undefined) {
                continue;
              }
              //alert(features[i]);
              features[i].attributes.waycolor = waycolor;
              if (!bounds) {
                  bounds = features[i].geometry.getBounds();
              } else {
                  bounds.extend(features[i].geometry.getBounds());
              }
              okfeatures.push(features[i]);

          }
          layer.addFeatures(okfeatures);
          if (zoom) {
            map.zoomToExtent(bounds);
          }
      }
  }

  function showWaysFromString(layer, s, waycolor, zoom) {
      showWays(layer, wkt.read(s), waycolor, zoom);
  }

  function showComponent(comp_index) {
    for (i = 0; i < comp_layers.length; i++) {
      comp_layers[i].setVisibility(i == comp_index);
    }
    map.zoomToExtent(comp_layers[comp_index].getDataExtent());
  }

  function showForwardPath(comp_index) {
    for (i = 0; i < comp_forward_path_layers.length; i++) {
      comp_forward_path_layers[i].setVisibility(i == comp_index);
    }
    for (i = 0; i < comp_backward_path_layers.length; i++) {
      comp_backward_path_layers[i].setVisibility(false);
    }
    map.zoomToExtent(comp_forward_path_layers[comp_index].getDataExtent());
  }

  function showBackwardPath(comp_index) {
    for (i = 0; i < comp_forward_path_layers.length; i++) {
      comp_forward_path_layers[i].setVisibility(false);
    }
    for (i = 0; i < comp_backward_path_layers.length; i++) {
      comp_backward_path_layers[i].setVisibility(i == comp_index);
    }
    map.zoomToExtent(comp_backward_path_layers[comp_index].getDataExtent());
  }
</script>

<div id="core" class="clearfix">
            <section id="left">
<div class="border">
                <h2>Road <%= @road.ref_prefix + @road.ref_number %></h2>

<h3>Report</h3>

<ul>
<% @status.issues.each do |issue| %>
<%= render_erb("issue_#{issue.name}.erb", @country, @report, @status, issue).html_safe %>
<% end %>
</ul>

<h3>Structure</h3>

<% @road.comps.each_with_index do |comp, i| %>
<div class="component_info">
<span class="title">Component <%= i + 1 %> (<a href="javascript:showComponent(<%= i %>)">show</a>)</span><br>
path <span style="color: <%= comp.roundtrip.forward_path.complete ? 'green' : 'red' %>">from beginning to end</span> (<a href="javascript:showForwardPath(<%= i %>)">show</a>)<br>
path <span style="color: <%= comp.roundtrip.backward_path.complete ? 'green' : 'red' %>">from end to beginning</span> (<a href="javascript:showBackwardPath(<%= i %>)">show</a>)
</div>
<% end %>

<h3>Info</h3>
<small>
<% if @road.relation %><b>Relation:</b> <a href="http://www.openstreetmap.org/browse/relation/<%= @road.relation.id %>"><%= @road.relation.id %></a><br><% end %>
<b>Ways:</b> all (<%= @road.num_all_ways %>), with ref tag (<%= @road.num_ref_ways %>), in relation (<%= @road.num_relation_ways %>)<% if !@status.percent_with_lanes.nan? and !@status.percent_with_maxspeed.nan? %>, with <i>lanes</i> (<%= @status.percent_with_lanes.to_i %>%), with <i>maxspeed</i> (<%= @status.percent_with_maxspeed.to_i %>%)<% end %><% if @road.relation and @road.relation.tags['note'] %><br><b>Note:</b> <%= @road.relation.tags['note'] %><% end %>
</small>

<p>
<button name="use_cache" onclick="refreshReport()">refresh report (don't use cache)</button>
<br>
<small>icons from <a href="http://www.fatcow.com/free-icons">FatCow</a></small>
</p>
</div>
</section>  
  
            <section id="right">  
<div id="map" class="smallmap"></div>
            </section>  
        </div>  
